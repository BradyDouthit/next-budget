{"ast":null,"code":"var _jsxFileName = \"/Users/bradydouthit/Desktop/Projects/next-budget/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Jumbotron, Button, Input, Label, Form, FormGroup, FormFeedback, FormText } from 'reactstrap';\nimport '../css/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"addItem\", event => {\n      event.preventDefault(); //if parsed value from user is not a number\n\n      if (isNaN(parseFloat(this.state.itemValue)) || this.state.itemValue === 0) {\n        //set error message\n        this.setState({\n          valueErrorMessage: true\n        });\n      } //if the value is an empty string\n\n\n      if (!this.state.itemName.length) {\n        this.setState({\n          nameErrorMessage: true\n        });\n      } //if value is a number and greater than 0, and name is not an empty string\n\n\n      if (!isNaN(parseFloat(this.state.itemValue)) && this.state.itemValue > 0 && this.state.itemName.length) {\n        let itemArr = this.state.budgetedItems;\n        itemArr.push({\n          name: this.state.itemName,\n          monthlyCost: this.state.itemValue\n        });\n        this.getMonthlyTotal();\n        this.setState({\n          budgetedItems: itemArr,\n          itemValue: '',\n          itemName: '',\n          valueErrorMessage: false,\n          nameErrorMessage: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"getMonthlyTotal\", () => {\n      let monthlyTotal = 0;\n      this.state.budgetedItems.map(item => {\n        monthlyTotal = monthlyTotal + parseFloat(item.monthlyCost);\n      });\n      this.setState({\n        monthlyTotal: monthlyTotal\n      });\n    });\n\n    this.state = {\n      budgetedItems: [],\n      itemValue: 0,\n      itemName: '',\n      monthlyTotal: 0,\n      valueErrorMessage: '',\n      nameErrorMessage: '',\n      nameValid: true,\n      valueValid: true\n    };\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleValueChange(event) {\n    //if parsed value from user is not a number\n    if (isNaN(parseFloat(this.state.itemValue)) || this.state.itemValue === 0) {\n      //set error message\n      this.setState({\n        valueErrorMessage: true\n      });\n    } else {\n      this.setState({\n        valueErrorMessage: false\n      });\n    }\n\n    this.setState({\n      itemValue: event.target.value\n    });\n  }\n\n  handleNameChange(event) {\n    //if the value is an empty string\n    if (this.state.itemName.length) {\n      this.setState({\n        nameErrorMessage: false\n      });\n    } else {\n      this.setState({\n        nameErrorMessage: true\n      });\n    }\n\n    this.setState({\n      itemName: event.target.value\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, __jsx(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      className: \"display-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, \"Next Budget\"), __jsx(\"p\", {\n      className: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, \"Simply enter your monthly expenses and names, the app will figure out the total cost of your bills.\"), __jsx(\"hr\", {\n      className: \"my-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }), __jsx(Form, {\n      onSubmit: this.addItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, __jsx(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, __jsx(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, \"Name:\"), __jsx(Input, {\n      type: \"text\",\n      placeholder: \"Mortgage\",\n      value: this.state.itemName,\n      onChange: this.handleNameChange,\n      valid: !this.state.nameErrorMessage,\n      invalid: this.state.nameErrorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    })), __jsx(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, __jsx(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, \"Monthly Cost: $\", this.state.monthlyTotal), __jsx(Input, {\n      type: \"text\",\n      placeholder: \"1200\",\n      value: this.state.itemValue,\n      onChange: this.handleValueChange,\n      valid: !this.state.valueErrorMessage,\n      invalid: this.state.valueErrorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    })), __jsx(Button, {\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \"Submit\"), __jsx(\"hr\", {\n      className: \"my-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    })), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"Your monthly expenses:\"), __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, this.state.budgetedItems.map((item, index) => __jsx(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }, item.name, \": $\", item.monthlyCost))), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, \"Monthly total: $\", this.state.monthlyTotal)));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/bradydouthit/Desktop/Projects/next-budget/pages/index.js"],"names":["React","Jumbotron","Button","Input","Label","Form","FormGroup","FormFeedback","FormText","Home","Component","constructor","props","event","preventDefault","isNaN","parseFloat","state","itemValue","setState","valueErrorMessage","itemName","length","nameErrorMessage","itemArr","budgetedItems","push","name","monthlyCost","getMonthlyTotal","monthlyTotal","map","item","nameValid","valueValid","handleValueChange","bind","handleNameChange","target","value","render","addItem","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Jumbotron, Button, Input, Label, Form, FormGroup, FormFeedback, FormText } from 'reactstrap';\nimport '../css/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            budgetedItems: [],\n            itemValue: 0,\n            itemName: '',\n            monthlyTotal: 0,\n            valueErrorMessage: '',\n            nameErrorMessage: '',\n            nameValid: true,\n            valueValid: true\n\n        }\n\n        this.handleValueChange = this.handleValueChange.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleValueChange(event) {\n        //if parsed value from user is not a number\n        if (isNaN(parseFloat(this.state.itemValue)) || (this.state.itemValue === 0)) {\n            //set error message\n            this.setState({ valueErrorMessage: true })\n        }\n        else {\n            this.setState({valueErrorMessage: false })\n        }\n        this.setState({ itemValue: event.target.value });\n    }\n\n    handleNameChange(event) {\n        //if the value is an empty string\n        if (this.state.itemName.length) {\n            this.setState({ nameErrorMessage: false })\n        }\n        else {\n            this.setState({nameErrorMessage: true })\n        }\n        this.setState({ itemName: event.target.value });\n    }\n\n    addItem = (event) => {\n        event.preventDefault();\n        //if parsed value from user is not a number\n        if (isNaN(parseFloat(this.state.itemValue)) || (this.state.itemValue === 0)) {\n            //set error message\n            this.setState({ valueErrorMessage: true })\n        }\n        //if the value is an empty string\n        if (!this.state.itemName.length) {\n            this.setState({ nameErrorMessage: true })\n        }\n        //if value is a number and greater than 0, and name is not an empty string\n        if (!isNaN(parseFloat(this.state.itemValue)) && (this.state.itemValue > 0) && this.state.itemName.length) {\n            let itemArr = this.state.budgetedItems;\n\n            itemArr.push({\n                name: this.state.itemName,\n                monthlyCost: this.state.itemValue\n            })\n\n            this.getMonthlyTotal();\n            this.setState({ budgetedItems: itemArr, itemValue: '', itemName: '', valueErrorMessage: false, nameErrorMessage: false })\n        }\n    }\n\n    getMonthlyTotal = () => {\n        let monthlyTotal = 0;\n\n        this.state.budgetedItems.map(item => {\n            monthlyTotal = monthlyTotal + parseFloat(item.monthlyCost);\n        })\n\n        this.setState({ monthlyTotal: monthlyTotal })\n    }\n\n    render() {\n        return (\n            <div id=\"main-content\">\n                <Jumbotron>\n                    <h1 className=\"display-3\">Next Budget</h1>\n                    <p className=\"lead\">Simply enter your monthly expenses and names, the app will figure out the total cost of your bills.</p>\n                    <hr className=\"my-2\"></hr>\n                    <Form onSubmit={this.addItem}>\n                        <FormGroup>\n                            <Label>Name:</Label>\n                            <Input type=\"text\" \n                                    placeholder=\"Mortgage\" \n                                    value={this.state.itemName} \n                                    onChange={this.handleNameChange}\n                                    valid={!this.state.nameErrorMessage}\n                                    invalid={this.state.nameErrorMessage} />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Monthly Cost: ${this.state.monthlyTotal}</Label>\n                            <Input type=\"text\" \n                                    placeholder=\"1200\" \n                                    value={this.state.itemValue} \n                                    onChange={this.handleValueChange}\n                                    valid={!this.state.valueErrorMessage}\n                                    invalid={this.state.valueErrorMessage} />\n                        </FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Submit</Button>\n                        <hr className=\"my-2\"></hr>\n                    </Form>\n                    <h1>Your monthly expenses:</h1>\n                    <ul>\n                        {this.state.budgetedItems.map((item, index) => (\n                            <li key={index}>{item.name}: ${item.monthlyCost}</li>\n                        ))}\n                    </ul>\n                    <h1>Monthly total: ${this.state.monthlyTotal}</h1>\n                </Jumbotron>\n            </div>\n        )\n    }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}