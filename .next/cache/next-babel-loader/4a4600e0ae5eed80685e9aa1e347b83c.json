{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/bradydouthit/Desktop/Projects/next-budget/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Jumbotron, Button, Input, Label, Form, FormGroup, FormFeedback, FormText } from 'reactstrap';\nimport '../css/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"addItem\", function (event) {\n      event.preventDefault(); //if parsed value from user is not a number\n\n      if (isNaN(parseFloat(_this.state.itemValue)) || _this.state.itemValue === 0) {\n        //set error message\n        _this.setState({\n          valueErrorMessage: true\n        });\n      } //if the value is an empty string\n\n\n      if (!_this.state.itemName.length) {\n        _this.setState({\n          nameErrorMessage: true\n        });\n      } //if value is a number and greater than 0, and name is not an empty string\n\n\n      if (!isNaN(parseFloat(_this.state.itemValue)) && _this.state.itemValue > 0 && _this.state.itemName.length) {\n        var itemArr = _this.state.budgetedItems;\n        itemArr.push({\n          name: _this.state.itemName,\n          monthlyCost: _this.state.itemValue\n        });\n\n        _this.getMonthlyTotal();\n\n        _this.setState({\n          budgetedItems: itemArr,\n          itemValue: '',\n          itemName: '',\n          valueErrorMessage: false,\n          nameErrorMessage: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMonthlyTotal\", function () {\n      var monthlyTotal = 0;\n\n      _this.state.budgetedItems.map(function (item) {\n        monthlyTotal = monthlyTotal + parseFloat(item.monthlyCost);\n      });\n\n      _this.setState({\n        monthlyTotal: monthlyTotal\n      });\n    });\n\n    _this.state = {\n      budgetedItems: [],\n      itemValue: 0,\n      itemName: '',\n      monthlyTotal: 0,\n      valueErrorMessage: false,\n      nameErrorMessage: false\n    };\n    _this.handleValueChange = _this.handleValueChange.bind(_assertThisInitialized(_this));\n    _this.handleNameChange = _this.handleNameChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"handleValueChange\",\n    value: function handleValueChange(event) {\n      this.setState({\n        itemValue: event.target.value\n      });\n    }\n  }, {\n    key: \"handleNameChange\",\n    value: function handleNameChange(event) {\n      this.setState({\n        itemName: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        id: \"main-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, __jsx(Jumbotron, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, __jsx(\"h1\", {\n        className: \"display-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }\n      }, \"Next Budget\"), __jsx(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }\n      }, \"Simply enter your monthly expenses and names, the app will figure out the total cost of your bills.\"), __jsx(\"hr\", {\n        className: \"my-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }), __jsx(Form, {\n        onSubmit: this.addItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }, __jsx(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      }, __jsx(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }\n      }, \"Name:\"), __jsx(Input, {\n        type: \"text\",\n        placeholder: \"Mortgage\",\n        value: this.state.itemName,\n        onChange: this.handleNameChange,\n        valid: this.state.nameErrorMessage ? 'has-danger' : 'has-success',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }\n      })), __jsx(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }\n      }, __jsx(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }\n      }, \"Monthly Cost: $\", this.state.monthlyTotal), __jsx(Input, {\n        type: \"text\",\n        placeholder: \"1200\",\n        value: this.state.itemValue,\n        onChange: this.handleValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }\n      })), __jsx(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      }, \"Submit\"), __jsx(\"hr\", {\n        className: \"my-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }\n      })), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, \"Your monthly expenses:\"), __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }, this.state.budgetedItems.map(function (item, index) {\n        return __jsx(\"li\", {\n          key: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }\n        }, item.name, \": $\", item.monthlyCost);\n      })), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }\n      }, \"Monthly total: $\", this.state.monthlyTotal)));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport default Home;","map":{"version":3,"sources":["/Users/bradydouthit/Desktop/Projects/next-budget/pages/index.js"],"names":["React","Jumbotron","Button","Input","Label","Form","FormGroup","FormFeedback","FormText","Home","props","event","preventDefault","isNaN","parseFloat","state","itemValue","setState","valueErrorMessage","itemName","length","nameErrorMessage","itemArr","budgetedItems","push","name","monthlyCost","getMonthlyTotal","monthlyTotal","map","item","handleValueChange","bind","handleNameChange","target","value","addItem","index","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Jumbotron, Button, Input, Label, Form, FormGroup, FormFeedback, FormText } from 'reactstrap';\nimport '../css/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            budgetedItems: [],\n            itemValue: 0,\n            itemName: '',\n            monthlyTotal: 0,\n            valueErrorMessage: false,\n            nameErrorMessage: false\n        }\n\n        this.handleValueChange = this.handleValueChange.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleValueChange(event) {\n        this.setState({ itemValue: event.target.value });\n    }\n\n    handleNameChange(event) {\n        this.setState({ itemName: event.target.value });\n    }\n\n    addItem = (event) => {\n        event.preventDefault();\n        //if parsed value from user is not a number\n        if (isNaN(parseFloat(this.state.itemValue)) || (this.state.itemValue === 0)) {\n            //set error message\n            this.setState({ valueErrorMessage: true })\n        }\n        //if the value is an empty string\n        if (!this.state.itemName.length) {\n            this.setState({ nameErrorMessage: true })\n        }\n        //if value is a number and greater than 0, and name is not an empty string\n        if (!isNaN(parseFloat(this.state.itemValue)) && (this.state.itemValue > 0) && this.state.itemName.length) {\n            let itemArr = this.state.budgetedItems;\n\n            itemArr.push({\n                name: this.state.itemName,\n                monthlyCost: this.state.itemValue\n            })\n\n            this.getMonthlyTotal();\n            this.setState({ budgetedItems: itemArr, itemValue: '', itemName: '', valueErrorMessage: false, nameErrorMessage: false })\n        }\n    }\n\n    getMonthlyTotal = () => {\n        let monthlyTotal = 0;\n\n        this.state.budgetedItems.map(item => {\n            monthlyTotal = monthlyTotal + parseFloat(item.monthlyCost);\n        })\n\n        this.setState({ monthlyTotal: monthlyTotal })\n    }\n\n    render() {\n        return (\n            <div id=\"main-content\">\n                <Jumbotron>\n                    <h1 className=\"display-3\">Next Budget</h1>\n                    <p className=\"lead\">Simply enter your monthly expenses and names, the app will figure out the total cost of your bills.</p>\n                    <hr className=\"my-2\"></hr>\n                    <Form onSubmit={this.addItem}>\n                        <FormGroup>\n                            <Label>Name:</Label>\n                            <Input type=\"text\" \n                                    placeholder=\"Mortgage\" \n                                    value={this.state.itemName} \n                                    onChange={this.handleNameChange}\n                                    valid={this.state.nameErrorMessage ? 'has-danger' : 'has-success'} />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Monthly Cost: ${this.state.monthlyTotal}</Label>\n                            <Input type=\"text\" \n                                    placeholder=\"1200\" \n                                    value={this.state.itemValue} \n                                    onChange={this.handleValueChange} />\n                        </FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Submit</Button>\n                        <hr className=\"my-2\"></hr>\n                    </Form>\n                    <h1>Your monthly expenses:</h1>\n                    <ul>\n                        {this.state.budgetedItems.map((item, index) => (\n                            <li key={index}>{item.name}: ${item.monthlyCost}</li>\n                        ))}\n                    </ul>\n                    <h1>Monthly total: ${this.state.monthlyTotal}</h1>\n                </Jumbotron>\n            </div>\n        )\n    }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}